//@version=6
strategy("30s Leppyrd Strategy", overlay=true, initial_capital=20000, default_qty_type=strategy.fixed, default_qty_value=1, margin_long = 0 , margin_short = 0)

tp = input.int(10, "Take profit (handles)") * 4 // 1 point = 4 ticks (adapté à NQ)
sl = input.int(12, "Stop Loss (handles)") * 4 // 1 point = 4 ticks (adapté à NQ)
tf3        = "3"
tf5        = "5"

getLastPivots() =>
    // --- Inputs ---
    lenPivot   = input.int(1, "Pivot Candle Offset (1 = 3-candles pivot)")

  
    // --- Pivot High/Low Identification ---
    pivotHigh_3 = request.security(syminfo.tickerid, tf3, ta.pivothigh(high, lenPivot, lenPivot))
    pivotLow_3  = request.security(syminfo.tickerid, tf3, ta.pivotlow(low, lenPivot, lenPivot))
    pivotHigh_5 = request.security(syminfo.tickerid, tf5, ta.pivothigh(high, lenPivot, lenPivot))
    pivotLow_5  = request.security(syminfo.tickerid, tf5, ta.pivotlow(low, lenPivot, lenPivot))

    var float pivotHighLevel = na
    var float pivotLowLevel  = na
    if (not na(pivotHigh_3)) and (not na(pivotHigh_5))
        pivotHighLevel := math.min(pivotHigh_3, pivotHigh_5)
    else if not na(pivotHigh_5)
        pivotHighLevel := pivotHigh_5
    else if not na(pivotHigh_3)
        pivotHighLevel := pivotHigh_3

    if (not na(pivotLow_3)) and (not na(pivotLow_5))
        pivotLowLevel := math.max(pivotLow_3, pivotLow_5)
    else if not na(pivotLow_3)
        pivotLowLevel := pivotLow_3
    else if not na(pivotLow_5)
        pivotLowLevel := pivotLow_5
    [pivotHighLevel, pivotLowLevel]

// // Est-on dans un range?
// // Define the lookback period and threshold
// lookback = 5
// threshold = 50
// // Get 5-minute high and low over the last 20 candles
// high_5min = ta.highest(request.security(syminfo.tickerid, "5", high), lookback)
// low_5min = ta.lowest(request.security(syminfo.tickerid, "5", low), lookback)
// // Compute the range
// range_5min = high_5min - low_5min
// 
// // Define the boolean condition
// is_low_volatility = range_5min < threshold

// --- EMA(20) et Détection du Range ---
// Pour EMA20 en 3min il faut prendre pente -0.9/0.7 avec TP10/SL20 --> test gain 8720$ en 132 trades soit 66$/trade pour win rate 76.52%
// Pour EMA20 en 5min il faut prendre pente -2.9/2.9 avec TP10/SL20 --> test gain 13490$ en 222 trades soit 60$/trade pour win rate 76.52%
timeframe_ema = input.string("5", "Time frame de l'EMA")
periode_ema = input.int(20, "Période de l'EMA")
pente_ema = request.security(syminfo.tickerid, timeframe_ema, ta.ema(close, periode_ema)) - request.security(syminfo.tickerid, timeframe_ema, ta.ema(close[3], periode_ema))
borne_basse = input.float(-2.9, "Borne basse pente EMA")  // Ajuster selon le marché
borne_haute = input.float(2.9, "Borne haute pente EMA")   // Ajuster selon le marché
marche_range = pente_ema > borne_basse and pente_ema < borne_haute

// --- Plot de la pente de l'EMA pour visualisation ---
plot(pente_ema, color=color.blue, title="Pente EMA20 5m")
bgcolor(marche_range ? color.new(color.gray, 90) : na)  // Fond gris si marché en range

// Validation de la plage temporelle testée pour la mise au point
// Define start and end date/time
startDate = timestamp(2025, 3, 10, 00, 05)   // March 110, 2024, 00:05 AM
endDate   = timestamp(2025, 3, 10, 03, 00) // March 10, 2024, 04:00
// Time condition: Only allow trades inside this range
isInTimeRange = (time >= startDate and time <= endDate)

// Specification des heures de trading
est_offset = 4 // usually 5. Change to 4 for Daylight Saving Time
timeEst = time - est_offset * 3600000  // Convert to EST (milliseconds)
hourEst = hour(timeEst)
minuteEst = minute(timeEst)
isTradingHours = (hourEst >= 3 and hourEst < 6) or (hourEst > 6 and hourEst < 12)


// --- Détection du croisement des pivots ---
// On détecte un croisement dès que, par rapport à la bougie précédente, le prix passe de l'autre côté du pivot.
[pivotHighLevel, pivotLowLevel] = getLastPivots()
pivotCrossHigh = ta.crossover(high, pivotHighLevel) //(high[1] < pivotHighLevel and high > pivotHighLevel)
pivotCrossLow  = ta.crossunder(low, pivotLowLevel) //(low[1] > pivotLowLevel and low < pivotLowLevel)

// Affichage d'une croix sur la bougie qui franchit le pivot
plotshape(pivotCrossHigh, style=shape.cross, location=location.abovebar, color=color.red, size=size.normal, title="Cross Pivot High")
plotshape(pivotCrossLow, style=shape.cross, location=location.belowbar, color=color.green, size=size.normal, title="Cross Pivot Low")

// --- Gestion du signal ---
// On déclare des flags persistants pour signaler une ouverture de position en attente.
var bool pendingSIBI = false
var bool pendingBISI = false

// Si aucune position n'est ouverte et que le prix recroise un pivot, on annule les ordres en attente.
if strategy.position_size == 0 and (pivotCrossHigh or pivotCrossLow)
    label.new(bar_index, high, text="CROSS-Kill pending", color=color.red, style=label.style_label_down, size=size.small)
    strategy.cancel_all()

// Activation du signal en fonction du pivot croisé.
if pivotCrossHigh
    pendingSIBI := true   // activation du signal SIBI pour un trade SHORT
else if pivotCrossLow
    pendingBISI := true   // activation du signal BISI pour un trade LONG

// --- Détection du FVG sur timeframe 30S ---
// Pour SIBI : le FVG baissier se forme si, sur une formation de 3 bougies, la condition low[2] > high est vraie sur au moins une bougie.
sibi_arr = request.security_lower_tf(syminfo.tickerid, "30S", low[2] > high)
bool sibi_formed_bool = false
for i = 0 to array.size(sibi_arr) - 1
    sibi_formed_bool := sibi_formed_bool or array.get(sibi_arr, i)

// Pour BISI : le FVG haussier se forme si, sur une formation de 3 bougies, la condition high[2] < low est vraie sur au moins une bougie.
bisi_arr = request.security_lower_tf(syminfo.tickerid, "30S", high[2] < low)
bool bisi_formed_bool = false
for i = 0 to array.size(bisi_arr) - 1
    bisi_formed_bool := bisi_formed_bool or array.get(bisi_arr, i)

// Récupération du prix de la formation FVG sur 30S (timeframe courant)
// Pour SIBI, on prend le premier prix (H3) de l'array, s'il existe ; pour BISI, le premier prix (L3).
sibi_price_arr = request.security_lower_tf(syminfo.tickerid, "30S", high)
bisi_price_arr = request.security_lower_tf(syminfo.tickerid, "30S", low)
sibi_price = array.size(sibi_price_arr) > 0 ? array.get(sibi_price_arr, 0) : na
bisi_price = array.size(bisi_price_arr) > 0 ? array.get(bisi_price_arr, 0) : na

// Affichage des FVG considérés : SIBI et BISI
if sibi_formed_bool
    label.new(bar_index, high, text="SIBI"+str.tostring(sibi_price), color=color.rgb(182, 220, 67), style=label.style_label_down, size=size.small)
if bisi_formed_bool
    label.new(bar_index, low, text="BISI"+str.tostring(bisi_price), color=color.rgb(172, 222, 255), style=label.style_label_down, size=size.small)
//plotshape(sibi_formed_bool, style=shape.labeldown, location=location.abovebar, color=color.red, text="SIBI", size=size.tiny, title="SIBI FVG")
//plotshape(bisi_formed_bool, style=shape.labelup, location=location.belowbar, color=color.green, text="BISI", size=size.tiny, title="BISI FVG")

// --- Exécution des ordres ---
// On ne lance un trade ou une analyse que si aucune position n'est ouverte.
if strategy.position_size == 0 and marche_range // and isTradingHours// and is_low_volatility and isInTimeRange
    // Si un signal est actif et que le FVG correspondant se forme, alors on passe l'ordre.
    if pendingBISI and bisi_formed_bool and not na(bisi_price)
        label.new(bar_index, open, text="LONG Triggered", color=color.red, style=label.style_label_down, size=size.small)
        strategy.cancel_all()
        strategy.order("Long BISI", strategy.long, qty=1, limit=bisi_price, comment="BISI trigger") 
        strategy.exit("Exit Long BISI", from_entry="Long BISI", profit=tp, loss=sl)
        pendingBISI := false

    if pendingSIBI and sibi_formed_bool and not na(sibi_price)
        label.new(bar_index, close, text="SHORT Triggered", color=color.red, style=label.style_label_down, size=size.small)
        strategy.cancel_all()
        strategy.order("ShortSIBI", direction=strategy.short, qty=1, limit=sibi_price, comment="SIBI trigger")
        strategy.exit("Exit Short SIBI", from_entry="ShortSIBI", profit=tp, loss=sl)
        pendingSIBI := false

// --- Plot des pivots ---
plot(pivotHighLevel, color=color.red, title="Pivot High")
plot(pivotLowLevel, color=color.green, title="Pivot Low")
